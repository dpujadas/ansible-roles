---
# tasks file for initial-setup

- name: Install required packages
  apt:
    name: '{{ item }}'
    state: 'installed'
  with_items: '{{ initial_setup_required_packages }}'
  tags: [initial-setup,packages,hostname]

- name: Set properly formatted hostname
  set_fact:
    initial_setup_hostname: '{{ inventory_hostname | regex_replace("\.", "-") }}'
  when: (initial_setup_hostname is not defined) or (initial_setup_hostname == '')
  tags: [initial-setup,hostname]

- name: Set hostname
  shell: >
    hostnamectl set-hostname {{ initial_setup_hostname }}
  when: ansible_hostname != initial_setup_hostname
  register: set_hostname
  tags: [initial-setup,hostname]

- name: Reload facts
  setup:
  when: set_hostname.changed
  tags: [initial-setup,hostname]

- name: Update /etc/hosts
  template:
    src: 'hosts.j2'
    dest: '/etc/hosts'
    owner: 'root'
    group: 'root'
    mode: '0644'
  tags: [initial-setup,hostname]

- name: Create Route53 DNS record
  route53:
    command: 'create'
    zone: '{{ initial_setup_localdomain }}'
    record: '{{ inventory_hostname }}.{{ initial_setup_localdomain }}'
    type: 'A'
    ttl: '{{ initial_setup_route53_ttl }}'
    value: '{{ ansible_default_ipv4.address }}'
    overwrite: 'true'
    aws_access_key: '{{ initial_setup_aws_access_key }}'
    aws_secret_key: '{{ initial_setup_aws_secret_key }}'
    private_zone: True
  when: initial_setup_create_dns_record
  tags: [initial-setup,hostname]

- name: Update apt packages
  apt:
    update_cache: 'yes'
    cache_valid_time: '86400'
  tags: [initial-setup,apt]

- name: Upgrade server
  apt: 
    upgrade: 'full'
  when: initial_setup_full_upgrade
  tags: [initial-setup,apt]

- name: Set the correct timezone
  shell: >
    timedatectl set-timezone {{ initial_setup_timezone }}
  when: (initial_setup_timezone is defined) and (initial_setup_timezone)
  tags: [initial-setup]

- name: Install ntp server
  apt:
    name: 'ntp'
    state: 'present'
  tags: [initial-setup,ntp]

- name: Start the ntp service
  service:
    name: 'ntp'
    state: 'started'
    enabled: 'yes'
  tags: [initial-setup,ntp]

- name: Setup internal management public key
  authorized_key:
    user: '{{ initial_setup_management_user }}'
    key: '{{ item }}'
    key_options: 'from="{{ initial_setup_management_from }}"'
  with_file: '{{ initial_setup_management_public_key }}'
  tags: [initial-setup]

- name: Install silence-unless-failed script
  copy: 
    src: 'silence-unless-failed'
    dest: '/usr/local/bin'
    owner: 'root'
    group: 'root'
    mode: '0755'
  tags: [initial-setup]

- name: Create and enable swap file
  shell: dd if=/dev/zero of={{ initial_setup_swap_file }} bs=1M count={{ initial_setup_swap_size }} && mkswap {{ initial_setup_swap_file }} && swapon {{ initial_setup_swap_file }}
  args:
    creates: '{{ initial_setup_swap_file }}'
  when: initial_setup_create_swap or ((ec2_instance_type is defined) and (ec2_instance_type=='t2.micro'))
  tags: [initial-setup,swap]

- name: Make swap survive reboots
  lineinfile:
    dest: '/etc/fstab'
    regexp: '^{{ initial_setup_swap_file }} none swap sw 0 0$'
    line: '{{ initial_setup_swap_file }} none swap sw 0 0'
  when: initial_setup_create_swap or ((ec2_instance_type is defined) and (ec2_instance_type=='t2.micro'))
  tags: [initial-setup,swap]

- name: Set default umask
  lineinfile:
    dest: '/etc/login.defs'
    regexp: '^UMASK[\s]+\d{1,4}$'
    line: 'UMASK {{ initial_setup_umask }}'
  when: initial_setup_umask is defined
  tags: [initial-setup,umask]

- name: Set sudoers default umask
  template:
    src: 'umask.j2'
    dest: '/etc/sudoers.d/umask'
    owner: 'root'
    group: 'root'
    mode: '0440'
  when: initial_setup_umask is defined
  tags: [initial-setup,umask]

# - name: Install needed locales
#   locale_gen:
#     name: '{{ item }}'
#     state: 'present'
#   with_items: initial_setup_locales
#   tags: [initial-setup]
